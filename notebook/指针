1. 指针声明
int *ptrInt;        // 声明一个指向 int 类型变量的指针
double *ptrDouble; // 声明一个指向 double 类型变量的指针
char *ptrChar;      // 声明一个指向 char 类型变量的指针
int* ptr_a;        // 这也是一个合法的指针变量声明方式

2. 指针的初始化
直接初始化：
* 在声明指针的同时，将一个变量的地址赋值给指针。

int x = 5;
int *ptr = &x; // ptr 指向 x 的内存地址



初始化为 nullptr (C++11 及其以上):
	* 将指针初始化为空指针，表示该指针当前不指向任何有效的内存地址。
	  * nullptr 是一个类型安全的空指针常量，比 C 中的 NULL 更安全。

	  int* ptr1 = nullptr;


	  未初始化的指针:
	  声明但未初始化的指针是野指针，它指向一个未知的内存地址，对其解引用是未定义行为。
	  int* ptr; // 未初始化的指针，是一个野指针



	  将一个指针赋值给另一个同类型的指针。
	  ```c++
	  int x = 10;
	  int* ptr1 = &x;
	  int* ptr2;
	  ptr2 = ptr1; // ptr2 现在指向和 ptr1 相同的内存地址，即 x 的地址
	  ```


指针的解引用 (Dereference)

	使用 * 解引用符来访问指针所指向的内存位置的值。
	```c++
	int x = 20;
	int *ptr = &x; // ptr 指向 x
	std::cout << *ptr << std::endl; // 输出 20，即 x 的值
	*ptr = 30;                   // 通过指针修改 x 的值,*ptr就是x改变*ptr就是改变x
	std::cout << x << std::endl; // 输出 30
	```


	5. 指针算术

	指针可以进行算术运算，例如加法、减法等。
	指针算术的单位是指针指向的数据类型的大小。例如，int* 指针加 1，实际上移动的字节数是 sizeof(int) 的大小。
	数组和指针：
	* 数组名本身可以看作指向数组第一个元素的指针。
	```c++
	int arr[] = {10, 20, 30, 40, 50};
int *ptr = arr; // 指针指向数组的第一个元素
std::cout << *ptr << std::endl;     // 输出 10
std::cout << *(ptr + 2) << std::endl; // 输出 30 （等价于 arr[2]）
ptr++;                              // ptr 指向数组的下一个元素
std::cout << *ptr << std::endl; // 输出 20
std::cout << *(ptr + 1)[1] << std::endl //输出 30
```



